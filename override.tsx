import { useState, useEffect } from "react";
import axios from "axios"; // Using axios for Fetching

// Assume we've loaded the decimal values from the CSV
const timeDecimalMap = [

{ time: 1000, decimal: 0.0794871795 },
{ time: 1001, decimal: 0.0820512821 },
{ time: 1002, decimal: 0.0846153846 },
{ time: 1003, decimal: 0.0871794872 },
{ time: 1004, decimal: 0.0897435897 },
{ time: 1005, decimal: 0.0923076923 },
{ time: 1006, decimal: 0.0948717949 },
{ time: 1007, decimal: 0.0974358974 },
{ time: 1008, decimal: 0.1000000000 },
{ time: 1009, decimal: 0.1025641026 },
{ time: 1010, decimal: 0.1051282051 },
{ time: 1011, decimal: 0.1076923077 },
{ time: 1012, decimal: 0.1102564103 },
{ time: 1013, decimal: 0.1128205128 },
{ time: 1014, decimal: 0.1153846154 },
{ time: 1015, decimal: 0.1179487179 },
{ time: 1016, decimal: 0.1205128205 },
{ time: 1017, decimal: 0.1230769231 },
{ time: 1018, decimal: 0.1256410256 },
{ time: 1019, decimal: 0.1282051282 },
{ time: 1020, decimal: 0.1307692308 },
{ time: 1021, decimal: 0.1333333333 },
{ time: 1022, decimal: 0.1358974359 },
{ time: 1023, decimal: 0.1384615385 },
{ time: 1024, decimal: 0.1410256410 },
{ time: 1025, decimal: 0.1435897436 },
{ time: 1026, decimal: 0.1461538462 },
{ time: 1027, decimal: 0.1487179487 },
{ time: 1028, decimal: 0.1512820513 },
{ time: 1029, decimal: 0.1538461538 },
{ time: 1030, decimal: 0.1564102564 },
{ time: 1031, decimal: 0.1589743590 },
{ time: 1032, decimal: 0.1615384615 },
{ time: 1033, decimal: 0.1641025641 },
{ time: 1034, decimal: 0.1666666667 },
{ time: 1035, decimal: 0.1692307692 },
{ time: 1036, decimal: 0.1717948718 },
{ time: 1037, decimal: 0.1743589744 },
{ time: 1038, decimal: 0.1769230769 },
{ time: 1039, decimal: 0.1794871795 },
{ time: 1040, decimal: 0.1820512821 },
{ time: 1041, decimal: 0.1846153846 },
{ time: 1042, decimal: 0.1871794872 },
{ time: 1043, decimal: 0.1897435897 },
{ time: 1044, decimal: 0.1923076923 },
{ time: 1045, decimal: 0.1948717949 },
{ time: 1046, decimal: 0.1974358974 },
{ time: 1047, decimal: 0.2000000000 },
{ time: 1048, decimal: 0.2025641026 },
{ time: 1049, decimal: 0.2051282051 },
{ time: 1050, decimal: 0.2076923077 },
{ time: 1051, decimal: 0.2102564103 },
{ time: 1052, decimal: 0.2128205128 },
{ time: 1053, decimal: 0.2153846154 },
{ time: 1054, decimal: 0.2179487179 },
{ time: 1055, decimal: 0.2205128205 },
{ time: 1056, decimal: 0.2230769231 },
{ time: 1057, decimal: 0.2256410256 },
{ time: 1058, decimal: 0.2282051282 },
{ time: 1059, decimal: 0.2307692308 },
{ time: 1100, decimal: 0.2333333333 },
{ time: 1101, decimal: 0.2358974359 },
{ time: 1102, decimal: 0.2384615385 },
{ time: 1103, decimal: 0.2410256410 },
{ time: 1104, decimal: 0.2435897436 },
{ time: 1105, decimal: 0.2461538462 },
{ time: 1106, decimal: 0.2487179487 },
{ time: 1107, decimal: 0.2512820513 },
{ time: 1108, decimal: 0.2538461538 },
{ time: 1109, decimal: 0.2564102564 },
{ time: 1110, decimal: 0.2589743590 },
{ time: 1111, decimal: 0.2615384615 },
{ time: 1112, decimal: 0.2641025641 },
{ time: 1113, decimal: 0.2666666667 },
{ time: 1114, decimal: 0.2692307692 },
{ time: 1115, decimal: 0.2717948718 },
{ time: 1116, decimal: 0.2743589744 },
{ time: 1117, decimal: 0.2769230769 },
{ time: 1118, decimal: 0.2794871795 },
{ time: 1119, decimal: 0.2820512821 },
{ time: 1120, decimal: 0.2846153846 },
{ time: 1121, decimal: 0.2871794872 },
{ time: 1122, decimal: 0.2897435897 },
{ time: 1123, decimal: 0.2923076923 },
{ time: 1124, decimal: 0.2948717949 },
{ time: 1125, decimal: 0.2974358974 },
{ time: 1126, decimal: 0.3000000000 },
{ time: 1127, decimal: 0.3025641026 },
{ time: 1128, decimal: 0.3051282051 },
{ time: 1129, decimal: 0.3076923077 },
{ time: 1130, decimal: 0.3102564103 },
{ time: 1131, decimal: 0.3128205128 },
{ time: 1132, decimal: 0.3153846154 },
{ time: 1133, decimal: 0.3179487179 },
{ time: 1134, decimal: 0.3205128205 },
{ time: 1135, decimal: 0.3230769231 },
{ time: 1136, decimal: 0.3256410256 },
{ time: 1137, decimal: 0.3282051282 },
{ time: 1138, decimal: 0.3307692308 },
{ time: 1139, decimal: 0.3333333333 },
{ time: 1140, decimal: 0.3358974359 },
{ time: 1141, decimal: 0.3384615385 },
{ time: 1142, decimal: 0.3410256410 },
{ time: 1143, decimal: 0.3435897436 },
{ time: 1144, decimal: 0.3461538462 },
{ time: 1145, decimal: 0.3487179487 },
{ time: 1146, decimal: 0.3512820513 },
{ time: 1147, decimal: 0.3538461538 },
{ time: 1148, decimal: 0.3564102564 },
{ time: 1149, decimal: 0.3589743590 },
{ time: 1150, decimal: 0.3615384615 },
{ time: 1151, decimal: 0.3641025641 },
{ time: 1152, decimal: 0.3666666667 },
{ time: 1153, decimal: 0.3692307692 },
{ time: 1154, decimal: 0.3717948718 },
{ time: 1155, decimal: 0.3743589744 },
{ time: 1156, decimal: 0.3769230769 },
{ time: 1157, decimal: 0.3794871795 },
{ time: 1158, decimal: 0.3820512821 },
{ time: 1159, decimal: 0.3846153846 },
{ time: 1200, decimal: 0.3871794872 },
{ time: 1201, decimal: 0.3897435897 },
{ time: 1202, decimal: 0.3923076923 },
{ time: 1203, decimal: 0.3948717949 },
{ time: 1204, decimal: 0.3974358974 },
{ time: 1205, decimal: 0.4000000000 },
{ time: 1206, decimal: 0.4025641026 },
{ time: 1207, decimal: 0.4051282051 },
{ time: 1208, decimal: 0.4076923077 },
{ time: 1209, decimal: 0.4102564103 },
{ time: 1210, decimal: 0.4128205128 },
{ time: 1211, decimal: 0.4153846154 },
{ time: 1212, decimal: 0.4179487179 },
{ time: 1213, decimal: 0.4205128205 },
{ time: 1214, decimal: 0.4230769231 },
{ time: 1215, decimal: 0.4256410256 },
{ time: 1216, decimal: 0.4282051282 },
{ time: 1217, decimal: 0.4307692308 },
{ time: 1218, decimal: 0.4333333333 },
{ time: 1219, decimal: 0.4358974359 },
{ time: 1220, decimal: 0.4384615385 },
{ time: 1221, decimal: 0.4410256410 },
{ time: 1222, decimal: 0.4435897436 },
{ time: 1223, decimal: 0.4461538462 },
{ time: 1224, decimal: 0.4487179487 },
{ time: 1225, decimal: 0.4512820513 },
{ time: 1226, decimal: 0.4538461538 },
{ time: 1227, decimal: 0.4564102564 },
{ time: 1228, decimal: 0.4589743590 },
{ time: 1229, decimal: 0.4615384615 },
{ time: 1230, decimal: 0.4641025641 },
{ time: 1231, decimal: 0.4666666667 },
{ time: 1232, decimal: 0.4692307692 },
{ time: 1233, decimal: 0.4717948718 },
{ time: 1234, decimal: 0.4743589744 },
{ time: 1235, decimal: 0.4769230769 },
{ time: 1236, decimal: 0.4794871795 },
{ time: 1237, decimal: 0.4820512821 },
{ time: 1238, decimal: 0.4846153846 },
{ time: 1239, decimal: 0.4871794872 },
{ time: 1240, decimal: 0.4897435897 },
{ time: 1241, decimal: 0.4923076923 },
{ time: 1242, decimal: 0.4948717949 },
{ time: 1243, decimal: 0.4974358974 },
{ time: 1244, decimal: 0.5000000000 },
{ time: 1245, decimal: 0.5025641026 },
{ time: 1246, decimal: 0.5051282051 },
{ time: 1247, decimal: 0.5076923077 },
{ time: 1248, decimal: 0.5102564103 },
{ time: 1249, decimal: 0.5128205128 },
{ time: 1250, decimal: 0.5153846154 },
{ time: 1251, decimal: 0.5179487179 },
{ time: 1252, decimal: 0.5205128205 },
{ time: 1253, decimal: 0.5230769231 },
{ time: 1254, decimal: 0.5256410256 },
{ time: 1255, decimal: 0.5282051282 },
{ time: 1256, decimal: 0.5307692308 },
{ time: 1257, decimal: 0.5333333333 },
{ time: 1258, decimal: 0.5358974359 },
{ time: 1259, decimal: 0.5384615385 },
{ time: 1300, decimal: 0.5410256410 },
{ time: 1301, decimal: 0.5435897436 },
{ time: 1302, decimal: 0.5461538462 },
{ time: 1303, decimal: 0.5487179487 },
{ time: 1304, decimal: 0.5512820513 },
{ time: 1305, decimal: 0.5538461538 },
{ time: 1306, decimal: 0.5564102564 },
{ time: 1307, decimal: 0.5589743590 },
{ time: 1308, decimal: 0.5615384615 },
{ time: 1309, decimal: 0.5641025641 },
{ time: 1310, decimal: 0.5666666667 },
{ time: 1311, decimal: 0.5692307692 },
{ time: 1312, decimal: 0.5717948718 },
{ time: 1313, decimal: 0.5743589744 },
{ time: 1314, decimal: 0.5769230769 },
{ time: 1315, decimal: 0.5794871795 },
{ time: 1316, decimal: 0.5820512821 },
{ time: 1317, decimal: 0.5846153846 },
{ time: 1318, decimal: 0.5871794872 },
{ time: 1319, decimal: 0.5897435897 },
{ time: 1320, decimal: 0.5923076923 },
{ time: 1321, decimal: 0.5948717949 },
{ time: 1322, decimal: 0.5974358974 },
{ time: 1323, decimal: 0.6000000000 },
{ time: 1324, decimal: 0.6025641026 },
{ time: 1325, decimal: 0.6051282051 },
{ time: 1326, decimal: 0.6076923077 },
{ time: 1327, decimal: 0.6102564103 },
{ time: 1328, decimal: 0.6128205128 },
{ time: 1329, decimal: 0.6153846154 },
{ time: 1330, decimal: 0.6179487179 },
{ time: 1331, decimal: 0.6205128205 },
{ time: 1332, decimal: 0.6230769231 },
{ time: 1333, decimal: 0.6256410256 },
{ time: 1334, decimal: 0.6282051282 },
{ time: 1335, decimal: 0.6307692308 },
{ time: 1336, decimal: 0.6333333333 },
{ time: 1337, decimal: 0.6358974359 },
{ time: 1338, decimal: 0.6384615385 },
{ time: 1339, decimal: 0.6410256410 },
{ time: 1340, decimal: 0.6435897436 },
{ time: 1341, decimal: 0.6461538462 },
{ time: 1342, decimal: 0.6487179487 },
{ time: 1343, decimal: 0.6512820513 },
{ time: 1344, decimal: 0.6538461538 },
{ time: 1345, decimal: 0.6564102564 },
{ time: 1346, decimal: 0.6589743590 },
{ time: 1347, decimal: 0.6615384615 },
{ time: 1348, decimal: 0.6641025641 },
{ time: 1349, decimal: 0.6666666667 },
{ time: 1350, decimal: 0.6692307692 },
{ time: 1351, decimal: 0.6717948718 },
{ time: 1352, decimal: 0.6743589744 },
{ time: 1353, decimal: 0.6769230769 },
{ time: 1354, decimal: 0.6794871795 },
{ time: 1355, decimal: 0.6820512821 },
{ time: 1356, decimal: 0.6846153846 },
{ time: 1357, decimal: 0.6871794872 },
{ time: 1358, decimal: 0.6897435897 },
{ time: 1359, decimal: 0.6923076923 },
{ time: 1400, decimal: 0.6948717949 },
{ time: 1401, decimal: 0.6974358974 },
{ time: 1402, decimal: 0.7000000000 },
{ time: 1403, decimal: 0.7025641026 },
{ time: 1404, decimal: 0.7051282051 },
{ time: 1405, decimal: 0.7076923077 },
{ time: 1406, decimal: 0.7102564103 },
{ time: 1407, decimal: 0.7128205128 },
{ time: 1408, decimal: 0.7153846154 },
{ time: 1409, decimal: 0.7179487179 },
{ time: 1410, decimal: 0.7205128205 },
{ time: 1411, decimal: 0.7230769231 },
{ time: 1412, decimal: 0.7256410256 },
{ time: 1413, decimal: 0.7282051282 },
{ time: 1414, decimal: 0.7307692308 },
{ time: 1415, decimal: 0.7333333333 },
{ time: 1416, decimal: 0.7358974359 },
{ time: 1417, decimal: 0.7384615385 },
{ time: 1418, decimal: 0.7410256410 },
{ time: 1419, decimal: 0.7435897436 },
{ time: 1420, decimal: 0.7461538462 },
{ time: 1421, decimal: 0.7487179487 },
{ time: 1422, decimal: 0.7512820513 },
{ time: 1423, decimal: 0.7538461538 },
{ time: 1424, decimal: 0.7564102564 },
{ time: 1425, decimal: 0.7589743590 },
{ time: 1426, decimal: 0.7615384615 },
{ time: 1427, decimal: 0.7641025641 },
{ time: 1428, decimal: 0.7666666667 },
{ time: 1429, decimal: 0.7692307692 },
{ time: 1430, decimal: 0.7717948718 },
{ time: 1431, decimal: 0.7743589744 },
{ time: 1432, decimal: 0.7769230769 },
{ time: 1433, decimal: 0.7794871795 },
{ time: 1434, decimal: 0.7820512821 },
{ time: 1435, decimal: 0.7846153846 },
{ time: 1436, decimal: 0.7871794872 },
{ time: 1437, decimal: 0.7897435897 },
{ time: 1438, decimal: 0.7923076923 },
{ time: 1439, decimal: 0.7948717949 },
{ time: 1440, decimal: 0.7974358974 },
{ time: 1441, decimal: 0.8000000000 },
{ time: 1442, decimal: 0.8025641026 },
{ time: 1443, decimal: 0.8051282051 },
{ time: 1444, decimal: 0.8076923077 },
{ time: 1445, decimal: 0.8102564103 },
{ time: 1446, decimal: 0.8128205128 },
{ time: 1447, decimal: 0.8153846154 },
{ time: 1448, decimal: 0.8179487179 },
{ time: 1449, decimal: 0.8205128205 },
{ time: 1450, decimal: 0.8230769231 },
{ time: 1451, decimal: 0.8256410256 },
{ time: 1452, decimal: 0.8282051282 },
{ time: 1453, decimal: 0.8307692308 },
{ time: 1454, decimal: 0.8333333333 },
{ time: 1455, decimal: 0.8358974359 },
{ time: 1456, decimal: 0.8384615385 },
{ time: 1457, decimal: 0.8410256410 },
{ time: 1458, decimal: 0.8435897436 },
{ time: 1459, decimal: 0.8461538462 },
{ time: 1500, decimal: 0.8487179487 },
{ time: 1501, decimal: 0.8512820513 },
{ time: 1502, decimal: 0.8538461538 },
{ time: 1503, decimal: 0.8564102564 },
{ time: 1504, decimal: 0.8589743590 },
{ time: 1505, decimal: 0.8615384615 },
{ time: 1506, decimal: 0.8641025641 },
{ time: 1507, decimal: 0.8666666667 },
{ time: 1508, decimal: 0.8692307692 },
{ time: 1509, decimal: 0.8717948718 },
{ time: 1510, decimal: 0.8743589744 },
{ time: 1511, decimal: 0.8769230769 },
{ time: 1512, decimal: 0.8794871795 },
{ time: 1513, decimal: 0.8820512821 },
{ time: 1514, decimal: 0.8846153846 },
{ time: 1515, decimal: 0.8871794872 },
{ time: 1516, decimal: 0.8897435897 },
{ time: 1517, decimal: 0.8923076923 },
{ time: 1518, decimal: 0.8948717949 },
{ time: 1519, decimal: 0.8974358974 },
{ time: 1520, decimal: 0.9000000000 },
{ time: 1521, decimal: 0.9025641026 },
{ time: 1522, decimal: 0.9051282051 },
{ time: 1523, decimal: 0.9076923077 },
{ time: 1524, decimal: 0.9102564103 },
{ time: 1525, decimal: 0.9128205128 },
{ time: 1526, decimal: 0.9153846154 },
{ time: 1527, decimal: 0.9179487179 },
{ time: 1528, decimal: 0.9205128205 },
{ time: 1529, decimal: 0.9230769231 },
{ time: 1530, decimal: 0.9256410256 },
{ time: 1531, decimal: 0.9282051282 },
{ time: 1532, decimal: 0.9307692308 },
{ time: 1533, decimal: 0.9333333333 },
{ time: 1534, decimal: 0.9358974359 },
{ time: 1535, decimal: 0.9384615385 },
{ time: 1536, decimal: 0.9410256410 },
{ time: 1537, decimal: 0.9435897436 },
{ time: 1538, decimal: 0.9461538462 },
{ time: 1539, decimal: 0.9487179487 },
{ time: 1540, decimal: 0.9512820513 },
{ time: 1541, decimal: 0.9538461538 },
{ time: 1542, decimal: 0.9564102564 },
{ time: 1543, decimal: 0.9589743590 },
{ time: 1544, decimal: 0.9615384615 },
{ time: 1545, decimal: 0.9641025641 },
{ time: 1546, decimal: 0.9666666667 },
{ time: 1547, decimal: 0.9692307692 },
{ time: 1548, decimal: 0.9717948718 },
{ time: 1549, decimal: 0.9743589744 },
{ time: 1550, decimal: 0.9769230769 },
{ time: 1551, decimal: 0.9794871795 },
{ time: 1552, decimal: 0.9820512821 },
{ time: 1553, decimal: 0.9846153846 },
{ time: 1554, decimal: 0.9871794872 },
{ time: 1555, decimal: 0.9897435897 },
{ time: 1556, decimal: 0.9923076923 },
{ time: 1557, decimal: 0.9948717949 },
{ time: 1558, decimal: 0.9974358974 },
{ time: 1559, decimal: 1.0000000000 }
    // Add all other time/decimal pairs here...
];

export function TradingviewPointerFetchOverride() {
    const [fetchData, setFetchData] = useState(null);

    // Function to find the closest time to the decimal value
    const findClosestTime = (decimalValue) => {
        let closest = timeDecimalMap[0];
        let minDiff = Math.abs(decimalValue - closest.decimal);

        // Iterate through the map to find the closest decimal
        for (let i = 1; i < timeDecimalMap.length; i++) {
            const diff = Math.abs(decimalValue - timeDecimalMap[i].decimal);
            if (diff < minDiff) {
                minDiff = diff;
                closest = timeDecimalMap[i];
            }
        }
        return closest.time; // Return the time associated with the closest decimal
    };

    const handleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {
        const { clientX, currentTarget } = event;
        const { left, width } = currentTarget.getBoundingClientRect();

        // Calculate the position of the pointer on the X axis as a decimal between 0 and 1
        const xPosition = (clientX - left) / width;

        // Find the closest time to the pointer's xPosition
        const closestTime = findClosestTime(xPosition);

        // Make a fetch call to the API endpoint with the corresponding time
        axios
            .get(
                `https://xhnb-uz5t-pmyr.n7d.xano.io/api:1X76-q6_/tsla_daily_minute?time=${closestTime}`
            )
            .then((response) => {
                setFetchData(response.data);
            })
            .catch((error) => {
                console.error("Error fetching data:", error);
            });
    };

    return {
        onMouseMove: handleMouseMove, // Attach this to the 'Tradingview2' layer’s mouse move event
        fetchData, // The fetched data can be used/displayed elsewhere in the UI
    };
}